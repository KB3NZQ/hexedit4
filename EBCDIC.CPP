// EBCDIC.cpp : contains EBCDIC and other conversion tables and routines to read, test, fix them
//
// Copyright (c) 2011 by Andrew W. Phillips.
//
// This file is distributed under the MIT license, which basically says
// you can do what you want with it but I take no responsibility for bugs.
// See http://www.opensource.org/licenses/mit-license.php for full details.
//

#include "stdafx.h"
#include "HexEdit.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

// Table to convert EBCDIC to ASCII - used to display EBCDIC chars
// [Only converts display characters - not control characters.)
unsigned char e2a_tab[] =
{
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

		0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x5b,0x2e,0x3c,0x28,0x2b,0x21,
		0x26,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x5d,0x24,0x2a,0x29,0x3b,0x5E,
		0x2d,0x2f,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x2c,0x25,0x5f,0x3e,0x3f,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x60,0x3a,0x23,0x40,0x27,0x3d,0x22,

		0x00,0x61,0x62,0x63,0x64,0x65,0x66,0x67,
		0x68,0x69,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x6a,0x6b,0x6c,0x6d,0x6e,0x6f,0x70,
		0x71,0x72,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x73,0x74,0x75,0x76,0x77,0x78,
		0x79,0x7a,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,

		0x7B,0x41,0x42,0x43,0x44,0x45,0x46,0x47,
		0x48,0x49,0x00,0x00,0x00,0x00,0x00,0x00,
		0x7D,0x4a,0x4b,0x4c,0x4d,0x4e,0x4f,0x50,
		0x51,0x52,0x00,0x00,0x00,0x00,0x00,0x00,
		0x5C,0x00,0x53,0x54,0x55,0x56,0x57,0x58,
		0x59,0x5a,0x00,0x00,0x00,0x00,0x00,0x00,
		0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,
		0x38,0x39,0x00,0x00,0x00,0x00,0x00,0x00
};

// Table to convert ASCII to EBCDIC - used when entering chars in EBCDIC mode
// [Note: only converts display characters - not control characters.)
unsigned char a2e_tab[] =
{
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
		0x40,0x4F,0x7F,0x7B,0x5B,0x6C,0x50,0x7D,
		0x4D,0x5D,0x5C,0x4E,0x6B,0x60,0x4B,0x61,
		0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,
		0xF8,0xF9,0x7A,0x5E,0x4C,0x7E,0x6E,0x6F,

		0x7C,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,
		0xC8,0xC9,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,
		0xD7,0xD8,0xD9,0xE2,0xE3,0xE4,0xE5,0xE6,
		0xE7,0xE8,0xE9,0x4A,0xE0,0x5A,0x5F,0x6D,
		0x79,0x81,0x82,0x83,0x84,0x85,0x86,0x87,
		0x88,0x89,0x91,0x92,0x93,0x94,0x95,0x96,
		0x97,0x98,0x99,0xA2,0xA3,0xA4,0xA5,0xA6,
		0xA7,0xA8,0xA9,0xC0,0x00,0xD0,0x00,0x00,
};

// Table to convert ANSI to IBM/OEM char set
// This is for characters 128 and above (no conversion req'd for chars < 128)
unsigned char a2i_tab[] =
{
/*0080:*/ 0x00,0x00,0x00,0x9F, 0x00,0x00,0x00,0xD8, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*0090:*/ 0x00,0x60,0x27,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*00A0:*/ 0xFF,0xAD,0x9B,0x9C, 0x0F,0x9D,0x7C,0x15, 0x22,0x63,0xA6,0xAE, 0xAA,0x2D,0x52,0x00, 
/*00B0:*/ 0xF8,0xF1,0xFD,0x33, 0x27,0xE6,0x14,0xFA, 0x2C,0x31,0xA7,0xAF, 0xAC,0xAB,0x00,0xA8, 
/*00C0:*/ 0x41,0x41,0x41,0x41, 0x8E,0x8F,0x92,0x80, 0x45,0x90,0x45,0x45, 0x49,0x49,0x49,0x49, 
/*00D0:*/ 0x44,0xA5,0x4F,0x4F, 0x4F,0x4F,0x99,0x78, 0x4F,0x55,0x55,0x55, 0x9A,0x59,0x00,0xE1, 
/*00E0:*/ 0x85,0xA0,0x83,0x61, 0x84,0x86,0x91,0x87, 0x8A,0x82,0x88,0x89, 0x8D,0xA1,0x8C,0x8B, 
/*00F0:*/ 0x64,0xA4,0x95,0xA2, 0x93,0x6F,0x94,0xF6, 0x6F,0x97,0xA3,0x96, 0x81,0x79,0x00,0x98, 
};

// Table to convert IBM/OEM to ANSI char set
// This is for characters 128 and above (no conversion req'd for chars < 128)
unsigned char i2a_tab[] =
{
/*0080:*/ 0xC7,0xFC,0xE9,0xE2, 0xE4,0xE0,0xE5,0xE7, 0xEA,0xEB,0xE8,0xEF, 0xEE,0xEC,0xC4,0xC5, 
/*0090:*/ 0xC9,0xE6,0xC6,0xF4, 0xF6,0xF2,0xFB,0xF9, 0xFF,0xD6,0xDC,0xA2, 0xA3,0xA5,0x50,0x83, 
/*00A0:*/ 0xE1,0xED,0xF3,0xFA, 0xF1,0xD1,0xAA,0xBA, 0xBF,0x00,0xAC,0xBD, 0xBC,0xA1,0xAB,0xBB, 
/*00B0:*/ 0x00,0x00,0x00,0x7C, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*00C0:*/ 0x00,0x00,0x00,0x00, 0x2D,0x2B,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*00D0:*/ 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*00E0:*/ 0xDF,0x00,0x00,0x00, 0x00,0x00,0xB5,0x00, 0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00, 
/*00F0:*/ 0x00,0xB1,0x00,0x00, 0x00,0x00,0xF7,0x00, 0xB0,0xB7,0xB7,0x00, 0x6E,0xB2,0x80,0xA0, 
};

void CHexEditApp::InitConversions()
{
	int ii;                             // Loop var
	FILE *ftab;                         // File containing the new EBCDIC table
	CString err_mess;                   // Any problems with table read from file

	if ((ftab = fopen(GetExePath() + "EBCDIC.TAB", "rb")) != NULL)
	{
		// File found - read it into e2a_tab
		if (fread(e2a_tab, sizeof(e2a_tab), 1, ftab) == 1)
		{
			ASSERT(fgetc(ftab) == EOF);        // Make sure file is right length
			ASSERT(e2a_tab[0] == 0);

			fclose(ftab);

			// Fix a2e_tab to match e2a_tab
			for (ii = 0; ii < sizeof(a2e_tab); ++ii)        // Init to all zero
				a2e_tab[ii] = 0;

			for (ii = 0; ii < sizeof(e2a_tab); ++ii)
			{
				if (e2a_tab[ii] < 128)
					a2e_tab[e2a_tab[ii]] = ii;
				else if (e2a_tab[ii] != 0)
				{
					CString ss;
					ss.Format("EBCDIC table entry %ld is not a valid ASCII character\n", long(ii));
					err_mess += ss;
				}
			}
		}
		else
			err_mess = "ECBDIC.TAB is too short";

		if (!err_mess.IsEmpty())
			AfxMessageBox(err_mess);
	}

#ifdef _DEBUG
	// Verify that ASCII -> EBCDIC and EBCDIC -> ASCII conversions are compatible
	for (ii = 0; ii < 256; ++ii)
	{
		ASSERT(e2a_tab[ii] < 128);
		if (e2a_tab[ii] > 0)
			ASSERT(a2e_tab[e2a_tab[ii]] == ii);
	}
	for (ii = 0; ii < 128; ++ii)
		if (a2e_tab[ii] > 0)
			ASSERT(e2a_tab[a2e_tab[ii]] == ii);
#endif
}
